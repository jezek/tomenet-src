/* register server type for #if..#else..#endif structures with 'preproc' */
#parse "../config.h"
#parse "../common/defines-local.h"
#parse "../common/defines-features.h"

/* specific includes for spells.pre file */
#include "../common/defines-spells.h"


/* $Id$ */
/* File: spells.pkg */

/*
 * Purpose: Lua interface defitions for spells.
 * To be processed by tolua to generate C source code.
 */

/* added this for consistency in some (unrelated) header-inclusion, it IS a server file, isn't it? */
$#define SERVER

$#include "angband.h"
$#include "lua.h"

typedef char* cptr;
typedef int errr;
typedef unsigned char bool;
typedef unsigned char byte;
typedef signed short s16b;
typedef unsigned short u16b;
typedef signed int s32b;
typedef unsigned int u32b;


/* cave.c */
/* These should not directly be used from LUA, because at least cave_set_feat_live()
   assumes that allow_terraforming() has been checked before!
	extern void cave_set_feat(worldpos *wpos, int y, int x, int feat);
	extern void cave_set_feat_live(worldpos *wpos, int y, int x, int feat);
   Instead, for Glyphs we use the following one cleanly: */
// Argh, I need cave_set_feat for arcade stuff. -Moltor
extern void cave_set_feat(worldpos *wpos, int y, int x, int feat);
extern void warding_glyph(int Ind);
#ifdef ARCADE_SERVER
extern int check_feat(worldpos *wpos, int y, int x);
#endif

/* cmd2.c */
extern void do_cmd_fusion(int Ind);

/* generate.c */
extern void place_up_stairs(worldpos *wpos, int y, int x);

#ifdef ARCADE_SERVER
extern void arcade_wipe(worldpos *wpos);
#endif

/* spells1.c */
extern byte spell_color(int type);
//extern void apply_morph(int Ind, int power, char * killer);
extern void take_hit(int Ind, int damage, cptr kb_str, int Ind_attacker);
extern void take_xp_hit(int Ind, int damage, cptr hit_from, bool mode, bool fatal, bool disturb, int Ind_attacker);
extern void take_sanity_hit(int Ind, int damage, cptr hit_from, int Ind_attacker);
extern s16b poly_r_idx(int r_idx);
//extern bool check_st_anchor(struct worldpos *wpos);
extern bool check_st_anchor(struct worldpos *wpos, int y, int x);
extern bool swap_position(int Ind, int lty, int ltx);
extern bool teleport_away(int m_idx, int dis);
extern void teleport_player(int Ind, int dis, bool ignore_pvp);
extern void teleport_player_to(int Ind, int ny, int nx);
extern void teleport_player_level(int Ind, bool force);
extern bool bypass_invuln;
extern void acid_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void elec_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void fire_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern void cold_dam(int Ind, int dam, cptr kb_str, int Ind_attacker);
extern bool inc_stat(int Ind, int stat);
extern bool dec_stat(int Ind, int stat, int amount, int mode);
extern bool res_stat(int Ind, int stat);
extern bool apply_disenchant(int Ind, int mode);
extern bool apply_discharge(int Ind, int dam);
extern bool apply_discharge_item(int o_idx, int dam);
extern bool project_hook(int Ind, int typ, int dir, int dam, int flg, char *attacker);
extern bool project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker);
//extern bool lua_project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker);
extern int set_all_destroy(object_type *o_ptr);
extern int set_cold_destroy(object_type *o_ptr);
extern int set_impact_destroy(object_type *o_ptr);
extern int set_water_destroy(object_type *o_ptr);
extern int equip_damage(int Ind, int typ);
extern int inven_damage(int Ind, inven_func typ, int perc);
extern int weapon_takes_damage(int Ind, int typ, int slot);
#ifndef NEW_SHIELDS_NO_AC
extern int shield_takes_damage(int Ind, int typ);
#endif
//extern int inven_damage(int Ind, object_type *typ, int perc);
extern bool set_oppose_acid(int Ind, int v);
extern bool set_oppose_elec(int Ind, int v);
extern bool set_oppose_fire(int Ind, int v);
extern bool set_oppose_cold(int Ind, int v);
extern bool set_oppose_pois(int Ind, int v);
extern bool set_stun(int Ind, int v);
extern bool set_cut(int Ind, int v, int attacker);
extern bool set_food(int Ind, int v);
extern bool set_invuln_short(int Ind, int v);
extern bool set_biofeedback(int Ind, int v);
extern bool set_adrenaline(int Ind, int v);
extern bool set_tim_esp(int Ind, int v);
extern bool set_st_anchor(int Ind, int v);
extern bool set_prob_travel(int Ind, int v);
extern bool set_mimic(int Ind, int v, int p);
extern bool set_tim_traps(int Ind, int v);
extern bool set_tim_manashield(int Ind, int v);
extern bool set_invis(int Ind, int v, int p);
extern bool set_fury(int Ind, int v);
extern bool set_tim_meditation(int Ind, int v);
extern bool set_tim_wraith(int Ind, int v);
extern bool set_tim_wraithstep(int Ind, int v);
extern bool set_blind(int Ind, int v);
extern bool set_confused(int Ind, int v);
extern bool set_poisoned(int Ind, int v, int attacker);
extern bool set_diseased(int Ind, int v, int attacker);
extern bool set_afraid(int Ind, int v);
extern bool set_paralyzed(int Ind, int v);
extern bool set_image(int Ind, int v);
extern bool set_fast(int Ind, int v, int p);
extern bool set_slow(int Ind, int v);
extern void wizard_lock(int Ind, int dir);

extern bool set_shield(int Ind, int v, int p, s16b o, s16b d1, s16b d2);
extern bool set_tim_thunder(int Ind, int v, int p1, int p2);
extern bool set_tim_regen(int Ind, int v, int p);
extern bool set_tim_mp2hp(int Ind, int v, int p);
extern bool set_tim_ffall(int Ind, int v);
extern bool set_tim_lev(int Ind, int v);
extern bool set_blessed(int Ind, int v);
extern bool set_res_fear(int Ind, int v);
extern bool set_hero(int Ind, int v);
extern bool set_shero(int Ind, int v);
extern bool set_protevil(int Ind, int v);
extern bool set_zeal(int Ind, int p, int v);
extern bool set_martyr(int Ind, int v);
extern bool set_invuln(int Ind, int v);
extern bool set_tim_invis(int Ind, int v);
extern bool set_tim_infra(int Ind, int v);
extern bool set_mindboost(int Ind, int p, int v);
extern bool set_kinetic_shield(int Ind, int v);
#ifdef ENABLE_OCCULT
extern bool set_savingthrow(int Ind, int v);
extern bool set_spirit_shield(int Ind, int power, int v);
#endif
extern bool identify_fully(int Ind);
extern void self_knowledge(int Ind);
extern bool ident_spell(int Ind);
extern void map_area(int Ind);
extern void mind_map_level(int Ind, int pow);
extern void wiz_lite(int Ind);
extern void wiz_lite_extra(int Ind);
extern void wiz_dark(int Ind);
extern bool detect_creatures_xxx(int Ind, u32b match_flag);
extern bool detect_creatures(int Ind);

/* spells2.c */
extern bool place_foe(int owner_id, struct worldpos *wpos, int y, int x, int r_idx);
extern bool heal_insanity(int Ind, int val);
extern void summon_cyber(int Ind, int s_clone, int clone_summoning);
extern void golem_creation(int Ind, int max);
extern bool hp_player(int Ind, int num);
extern bool hp_player_quiet(int Ind, int num, bool autoeffect);
extern void warding_glyph(int Ind);
extern bool do_dec_stat(int Ind, int stat, int mode);
extern bool do_res_stat(int Ind, int stat);
extern bool do_inc_stat(int Ind, int stat);
extern void identify_pack(int Ind);
extern void message_pain(int Ind, int m_idx, int dam);
extern bool remove_curse(int Ind);
extern bool remove_all_curse(int Ind);
extern bool restore_level(int Ind);
extern void self_knowledge(int Ind);
extern bool lose_all_info(int Ind);
extern bool detect_treasure(int Ind, int rad);
extern bool detect_magic(int Ind, int rad);
extern bool detect_invisible(int Ind);
extern bool detect_evil(int Ind);
extern bool detect_living(int Ind);
extern bool detect_noise(int Ind);
extern bool detection(int Ind, int rad);
extern bool detect_object(int Ind, int rad);
extern bool detect_trap(int Ind, int rad);
extern bool detect_sdoor(int Ind, int rad);
extern void stair_creation(int Ind);
extern bool enchant(int Ind, object_type *o_ptr, int n, int eflag);
extern bool enchant_spell(int Ind, int num_hit, int num_dam, int num_ac, int flags);
extern bool enchant_spell_aux(int Ind, int item, int num_hit, int num_dam, int num_ac, int flags);
extern bool ident_spell(int Ind);
extern bool ident_spell_aux(int Ind, int item);
extern bool identify_fully(int Ind);
extern bool identify_fully_item(int Ind, int item);
extern bool recharge(int Ind, int num);
extern bool recharge_aux(int Ind, int item, int num);
extern bool speed_monsters(int Ind);
extern bool slow_monsters(int Ind, int pow);
extern bool sleep_monsters(int Ind, int pow);
extern bool fear_monsters(int Ind, int pow);
extern bool stun_monsters(int Ind, int pow);
extern void aggravate_monsters(int Ind, int who);
extern void wake_minions(int Ind, int who);
extern bool genocide_aux(int Ind, worldpos *wpos, char typ);
extern bool genocide(int Ind);
extern bool obliteration(int who);
extern bool probing(int Ind);
extern bool project_los_wall(int Ind, int typ, int dam, int time, int interval, char *attacker);
extern bool project_los(int Ind, int typ, int dam, char *attacker);
extern bool away_evil(int Ind, int dist);
extern bool dispel_evil(int Ind, int dam);
extern bool dispel_undead(int Ind, int dam);
extern bool dispel_demons(int Ind, int dam);
extern bool dispel_monsters(int Ind, int dam);
extern bool turn_undead(int Ind);
extern void destroy_area(struct worldpos *wpos, int y1, int x1, int r, bool full, byte feat, int stun);
extern void earthquake(struct worldpos *wpos, int cy, int cx, int r);
extern void wipe_spell(struct worldpos *wpos, int cy, int cx, int r);
extern void lite_room(int Ind, struct worldpos *wpos, int y1, int x1);
extern void unlite_room(int Ind, struct worldpos *wpos, int y1, int x1);
extern bool lite_area(int Ind, int dam, int rad);
extern bool unlite_area(int Ind, int dam, int rad);
extern bool fire_ball(int Ind, int typ, int dir, int dam, int rad, char *attacker);
extern bool fire_wall(int Ind, int typ, int dir, int dam, int time, int interval, char *attacker);
extern bool fire_cloud(int Ind, int typ, int dir, int dam, int rad, int time, int interval, char *attacker);
extern bool fire_wave(int Ind, int typ, int dir, int dam, int rad, int time, int interval, s32b eff, char *attacker);
extern bool fire_bolt(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_beam(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_bolt_or_beam(int Ind, int prob, int typ, int dir, int dam, char *attacker);
extern bool fire_grid_bolt(int Ind, int typ, int dir, int dam, char *attacker);
extern bool fire_grid_beam(int Ind, int typ, int dir, int dam, char *attacker);
extern bool lite_line(int Ind, int dir, int dam, bool starlight);
extern bool drain_life(int Ind, int dir, int dam);
extern bool wall_to_mud(int Ind, int dir);
extern bool destroy_trap_door(int Ind, int dir);
extern bool disarm_trap_door(int Ind, int dir);
extern bool heal_monster(int Ind, int dir);
extern bool speed_monster(int Ind, int dir);
extern bool slow_monster(int Ind, int dir, int pow);
extern bool sleep_monster(int Ind, int dir, int pow);
extern bool confuse_monster(int Ind, int dir, int pow);
extern bool fear_monster(int Ind, int dir, int pow);
extern bool poly_monster(int Ind, int dir);
extern bool clone_monster(int Ind, int dir);
extern bool teleport_monster(int Ind, int dir);
extern bool cure_light_wounds_proj(int Ind, int dir);
extern bool cure_serious_wounds_proj(int Ind, int dir);
extern bool cure_critical_wounds_proj(int Ind, int dir);
extern void grow_trees(int Ind, int rad);
extern bool heal_other_proj(int Ind, int dir);
extern bool door_creation(int Ind);
extern bool trap_creation(int Ind, int mod, int rad);
extern bool destroy_doors_touch(int Ind, int rad);
extern bool destroy_traps_touch(int Ind, int rad);
extern bool destroy_traps_doors_touch(int Ind, int rad);
extern bool sleep_monsters_touch(int Ind);
extern bool create_artifact(int Ind, bool nolife);
extern bool create_artifact_aux(int Ind, int item);
extern bool curse_spell(int Ind);
extern bool curse_spell_aux(int Ind, int item);
extern void house_creation(int Ind, bool floor, bool jail);
extern bool do_vermin_control(int Ind);
extern void do_autokinesis_to(int Ind, int dis);
extern bool do_mstopcharm(int Ind);

/* traps.c */
extern void place_trap_specific(struct worldpos *wpos, int y, int x, int mod, int found);

/* runecraft.c */
extern bool warding_rune(int Ind, byte typ, byte mod, byte lvl);
extern bool warding_rune_break(int m_idx);

/* Druidry */
extern bool create_garden(int Ind, int level);
extern bool do_banish_animals(int Ind, int chance);
extern bool do_xtra_stats(int Ind, int s, int p, int v);
extern bool do_focus(int Ind, int p, int v);

#ifdef ENABLE_MAIA
extern void divine_vengeance(int Ind, int power);
extern void divine_gateway(int Ind);
extern bool do_divine_xtra_res(int Ind, int p);
extern bool do_divine_hp(int Ind, int p, int v);
extern bool do_divine_crit(int Ind, int p, int v);
#endif

extern void set_recall_depth(player_type * p_ptr, object_type * o_ptr);
extern bool set_recall_timer(int Ind, int v);
extern bool set_recall(int Ind, int v, object_type * o_ptr);

#ifdef ENABLE_OCCULT /* Occult */
extern bool do_shadow_gate(int Ind, int range);
#endif

/* xtra2.c */
extern bool set_melee_brand(int Ind, int v, int t, int p);
extern bool set_ammo_brand(int Ind, int v, int t, int p);

/*
 * The spell function must provide the desc
 */
struct spell_type
{
        cptr name;                      /* Name */
        byte skill_level;               /* Required level (to learn) */
	byte mana;			/* Required mana at lvl 1 */
	byte mana_max;			/* Required mana at max lvl */
	byte fail;			/* Minimum chance of failure */
        s16b level;                     /* Spell level(0 = not learnt) */
        byte spell_power;		/* affected by spell-power skill? */
};

struct school_type
{
        cptr name;                      /* Name */
        s16b skill;                     /* Skill used for that school */
};

//duplicate declarations (see above):
//extern void teleport_player(int Ind, int dis, bool ignore_pvp);
//extern void teleport_player_to(int Ind, int ny, int nx);
//extern void teleport_player_level(int Ind, bool force);

/* This could have some good uses */
extern s16b project_interval;
extern s16b project_time;
extern s32b project_time_effect;
/* extern bool project(int who, int rad, struct worldpos *wpos, int y, int x, int dam, int typ, int flg, char *attacker); */

/* lua_bind.c */
extern s16b new_school(int i, cptr name, s16b skill);
extern s16b new_spell(int i, cptr name);
extern spell_type *grab_spell_type @ spell(s16b num);
extern school_type *grab_school_type @ school(s16b num);
extern s32b lua_get_level(int Ind, s32b s, s32b lvl, s32b max, s32b min, s32b bonus);
extern s32b lua_spell_chance(int Ind, s32b chance, int level, int skill_level, int mana, int cur_mana, int stat);
/* extern u32b get_school_spell(cptr do_what); */
extern void lua_s_print(cptr logstr);
extern void lua_add_anote(char *anote);
extern void lua_del_anotes();
extern void lua_broadcast_motd();
extern void lua_count_houses(int Ind);
extern void lua_recalc_char(int Ind);
extern void lua_examine_item(int Ind, int Ind_target, int item);
extern void lua_determine_level_req(int Ind, int item);
extern void lua_strip_true_arts_from_absent_players(void);
extern void lua_strip_true_arts_from_present_player(int Ind, int mode);
extern void lua_strip_true_arts_from_floors(void);
extern void lua_check_player_for_true_arts(int Ind);
extern int lua_get_mon_lev(int r_idx);
extern char *lua_get_mon_name(int r_idx);
extern void lua_towns_treset(void);
extern long lua_player_exp(int level, int expfact);
extern void lua_fix_spellbooks(int spell, int mod);
extern void lua_fix_spellbooks_hackfix(int spell, int mod);
extern void lua_fix_spellbooks2(int sold, int snew, int swap);
extern void lua_arts_fix(int Ind);
extern char* lua_get_last_chat_line();
extern char* lua_get_last_chat_owner();
extern void lua_get_pgestat(int Ind, int n);
extern void lua_start_global_event(int Ind, int evtype, char *parm);
extern void lua_apply_item_changes(int Ind, int changes);
extern void lua_set_floor_flags(int Ind, u32b flags);
extern s32b lua_get_skill_mod(int Ind, int i);
extern s32b lua_get_skill_value(int Ind, int i);
extern void lua_fix_equip_slots(int Ind);
extern void lua_fix_skill_chart(int Ind);
extern void lua_takeoff_costumes(int Ind);
extern bool lua_is_unique(int r_idx);
extern bool lua_mimic_eligible(int Ind, int r_idx);
extern bool lua_mimic_humanoid(int r_idx);
extern void lua_forget_flavours(int Ind);
extern void lua_forget_map(int Ind);
extern void lua_forget_parties(void);
extern void lua_forget_guilds(void);

/* skills.c */
extern void hack_skill(int Ind, int s, int v, int m);

/* wild.c */
extern void wild_flags(int Ind, u32b flags);

/* lua-dependant 'constants' */
extern int __lua_HHEALING;
extern int __lua_HBLESSING;
extern int __lua_MSCARE;
extern int __lua_M_FIRST;
extern int __lua_M_LAST;
extern int __lua_OFEAR;

extern bool sauron_weakened;
extern bool sauron_weakened_iddc;
